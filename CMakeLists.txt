CMAKE_MINIMUM_REQUIRED(VERSION 3.2 FATAL_ERROR)

INCLUDE(GNUInstallDirs)

# ---[ Project
PROJECT(pthreadpool LANGUAGES C CXX)

# ---[ Options.
OPTION(PTHREADPOOL_BUILD_TESTS "Build pthreadpool unit tests" OFF)
OPTION(PTHREADPOOL_BUILD_BENCHMARKS "Build pthreadpool micro-benchmarks" OFF)

# ---[ CMake options
LIST(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
IF(PTHREADPOOL_BUILD_TESTS)
  ENABLE_TESTING()
ENDIF()

# ---[ Build flags
IF(NOT MSVC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
ENDIF()

# ---[ pthreadpool library
IF(CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
  SET(PTHREADPOOL_SRCS src/threadpool-shim.c)
ELSE()
  SET(PTHREADPOOL_SRCS src/threadpool-pthreads.c)
ENDIF()

ADD_LIBRARY(pthreadpool ${PTHREADPOOL_SRCS})
SET_TARGET_PROPERTIES(pthreadpool PROPERTIES PUBLIC_HEADER include/pthreadpool.h)
TARGET_INCLUDE_DIRECTORIES(pthreadpool PUBLIC include)
IF(NOT CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
  SET(CMAKE_THREAD_PREFER_PTHREAD TRUE)
  SET(THREADS_PREFER_PTHREAD_FLAG TRUE)
  FIND_PACKAGE(Threads REQUIRED)
  TARGET_LINK_LIBRARIES(pthreadpool PUBLIC Threads::Threads)
ENDIF()

FIND_PACKAGE(FXdiv REQUIRED)
TARGET_INCLUDE_DIRECTORIES(pthreadpool PRIVATE ${FXDIV_INCLUDE_DIRS})
ADD_DEPENDENCIES(pthreadpool ${FXDIV_DEPENDENCY})

INSTALL(TARGETS pthreadpool
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

IF(PTHREADPOOL_BUILD_TESTS)
  FIND_PACKAGE(GTest REQUIRED)

  ADD_EXECUTABLE(pthreadpool-test test/pthreadpool.cc)
  TARGET_INCLUDE_DIRECTORIES(pthreadpool-test PRIVATE ${GTEST_INCLUDE_DIRS})
  TARGET_LINK_LIBRARIES(pthreadpool-test pthreadpool ${GTEST_BOTH_LIBRARIES})
ENDIF()

IF(PTHREADPOOL_BUILD_BENCHMARKS)
  FIND_PACKAGE(GBenchmark REQUIRED)

  ADD_EXECUTABLE(latency-bench bench/latency.cc)
  TARGET_INCLUDE_DIRECTORIES(latency-bench PRIVATE ${GBENCHMARK_INCLUDE_DIRS})
  TARGET_LINK_LIBRARIES(latency-bench pthreadpool ${GBENCHMARK_LIBRARIES})

  ADD_EXECUTABLE(throughput-bench bench/throughput.cc)
  TARGET_INCLUDE_DIRECTORIES(throughput-bench PRIVATE ${GBENCHMARK_INCLUDE_DIRS})
  TARGET_LINK_LIBRARIES(throughput-bench pthreadpool ${GBENCHMARK_LIBRARIES})
ENDIF()
